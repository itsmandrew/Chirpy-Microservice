// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, email
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

type CreateUserRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
TRUNCATE TABLE users CASCADE
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByIDNoPassword = `-- name: GetUserByIDNoPassword :one
SELECT id, created_at, updated_at, email
FROM users
WHERE id = $1
`

type GetUserByIDNoPasswordRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) GetUserByIDNoPassword(ctx context.Context, id uuid.UUID) (GetUserByIDNoPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByIDNoPassword, id)
	var i GetUserByIDNoPasswordRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const updateIsChirpyRedByID = `-- name: UpdateIsChirpyRedByID :exec
UPDATE users
    SET is_chirpy_red = false,
        updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateIsChirpyRedByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateIsChirpyRedByID, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
    SET hashed_password = $1,
        email = $2,
        updated_at = NOW()
WHERE id = $3
`

type UpdateUserPasswordParams struct {
	HashedPassword string    `json:"hashed_password"`
	Email          string    `json:"email"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.Email, arg.ID)
	return err
}
